# -*- coding: utf-8 -*-
"""
Created on Wed Nov 28 17:48:04 2018

@author: Silvia Hervas
"""

import numpy as np
from FEpy import*
from numpy import array
from scipy.interpolate import griddata
from scipy.interpolate import LinearNDInterpolator
import time

filename = 'apply_displacements.inp'
# Import the voxel mesh and delete the cell part in order to mesh the surface in quad elements
def delete_cell(filename):

    inpfile = read_inp(filename)
    data=get_inp_data(inpfile)
    
    nodes = data['NODE']
    elem = data ['ELEMENT, TYPE=C3D8']
    element_cyto = data['ELSET, ELSET=ELEMENT_CYTO']
    element_gel = data['ELSET, ELSET=ELEMENT_GEL']
    nodes_gel = data['NSET, NSET=NODOS_GEL']
    nodes_gel_surface = data['NSET, NSET=NODOS_SURFACE_GEL']
    nodes_cell = data['NSET, NSET=NODOS_CELL']
    
    
    nodes_gel = np.union1d(nodes_gel, nodes_gel_surface)
#    # The new elements are the difference between the total and the cyto's elements
#    elem2 = np.setdiff1d(elem[:,0], element_cyto)
     
    # The new nodes are the only ones which are included in set gel (or just the difference between the total and the cyto's ones)
    # So next step is rewriting the nodes with its coordinates
    nodes2 = np.zeros((len(nodes_gel),4))
    nodes2[:, 0] = nodes_gel
    nodes2[:, 1:4] = nodes[nodes_gel - 1, 1:4]
        
    #Then the elements are written down too
    #elem_sorted = elem[elem[:, 0].argsort()]
    elem2 = np.zeros((len(element_gel),9))
    elem2[:, 0] = element_gel
    elem2[:, 1:9] = elem[element_gel - 1, 1:9]
    
    #Finally, write the new inp
    fname='apply_displacements2.inp'
    with open(fname, 'w') as file:
        file.write("""*Heading
** Job name: test Model name: apply_displacements_20
** Generated by: Abaqus/CAE 6.14-1
*Preprint, echo=NO, model=NO, history=NO, contact=NO
**
** PARTS
**
*Part, name=PART-1
""") 

        file.write('*NODE\n')
        np.savetxt(file, nodes2, fmt='%d, %.9f, %.9f, %.9f', newline='\n')

        file.write('*ELEMENT, TYPE=C3D8 \n')
        np.savetxt(file, elem2, fmt='%d', delimiter=', ', newline='\n')

def delete_cell2(filename):

    # with open(filename, 'r') as file:
        # filedata=file.read()

    # filedata=filedata.replace(',',' ')

    # with open(filename, 'w') as file:
      # file.write(filedata)

    inpfile = read_inp(filename)
    data=get_inp_data(inpfile)
    
    nodes = data['NODE']
    elem = data ['ELEMENT, TYPE=C3D4']
    element_cyto = data['ELSET, ELSET=ELEMENT_CYTO']
    element_gel = data['ELSET, ELSET=ELEMENT_GEL']
    nodes_gel = data['NSET, NSET=NODOS_GEL']
    nodes_gel_surface = data['NSET, NSET=NODOS_SURFACE_GEL']
    nodes_cell = data['NSET, NSET=NODOS_CELL']
    
    
    nodes_gel = np.union1d(nodes_gel, nodes_gel_surface)
#    # The new elements are the difference between the total and the cyto's elements
#    elem2 = np.setdiff1d(elem[:,0], element_cyto)
     
    # The new nodes are the only ones which are included in set gel (or just the difference between the total and the cyto's ones)
    # So next step is rewriting the nodes with its coordinates
    nodes2 = np.zeros((len(nodes_gel),4))
    nodes2[:, 0] = nodes_gel
    nodes2[:, 1:4] = nodes[nodes_gel - 1, 1:4]
        
    #Then the elements are written down too
    #elem_sorted = elem[elem[:, 0].argsort()]
    elem2 = np.zeros((len(element_gel),5))
    elem2[:, 0] = element_gel
    elem2[:, 1:5] = elem[element_gel - 1, 1:5]
    
    #Finally, write the new inp
    fname='apply_displacements2.inp'
    with open(fname, 'wb') as file:
        file.write(b"""*Heading
** Job name: test Model name: apply_displacements_20
** Generated by: Abaqus/CAE 6.14-1
*Preprint, echo=NO, model=NO, history=NO, contact=NO
**
** PARTS
**
*Part, name=PART-1
""") 

        file.write(b'*NODE\n')
        np.savetxt(file, nodes2, fmt='%i, %.9f, %.9f, %.9f', newline='\n')

        file.write(b'*ELEMENT, TYPE=C3D4 \n')
        np.savetxt(file, elem2, fmt='%d', delimiter=', ', newline='\n')

#Macro abaqus para shell 'Voxel2tri.py'

#Write the poly file
filename = 'apply_displacements3.inp'        
def write_poly(filename):
    inpfile = read_inp(filename)
    data=get_inp_data(inpfile)
    nodes = data['NODE']
    elem = data ['ELEMENT, TYPE=S4R']
    
    # It is crucial to identify which nodes are cell (0) and which ones are gel (1)
    # The gel set is located in the surface of the part
    coord_x1 = max(nodes[:,1])
    coord_x2 = min(nodes[:,1])

    coord_y1 = max(nodes[:,2])
    coord_y2 = min(nodes[:,2])
    
    coord_z1 = max(nodes[:,3])
    coord_z2 = min(nodes[:,3])
    nodes_set = np.zeros(len(nodes))
    for i in range (0, len(nodes_set)):
        if ( coord_x1 == np.absolute(nodes[i,1])) or (coord_y1 == np.absolute(nodes[i,2])) or (coord_z1 == np.absolute(nodes[i,3])) \
            or (coord_x2 == np.absolute(nodes[i,1])) or (coord_y2 == np.absolute(nodes[i,2])) or (coord_z2 == np.absolute(nodes[i,3])):
            nodes_set[i] = 1
        else: 
            nodes_set[i] = 0
            
    elem = np.delete(elem, 0, axis=1)
    
    #split mesh
    #Split is a, b, c and a, c ,d
    elem_new = np.zeros((2*len(elem), 3))
    for i in range (0, len(elem)):
        elem_new[2*i, :] = elem[i,0:3]
        elem_new[2*i+1,0]= elem[i,0]
        elem_new[2*i+1,1:3]= elem[i,2:4]
        
    # Finally, writing the poly file   
    fname = 'apply_displacements3.poly'
    with open(fname, 'w') as file:
        file.write("""# TetGen input file
#
# part 1 - node list
#  %i nodes, 3 dim., no attr. no mark
%i  3  0  0 
    """ % (len(nodes), len(nodes))) 
        for i in range (0,len(nodes)):
            file.write('%i\t%.7f\t%.7f\t%.7f\n' % (nodes[i,0], nodes[i,1], nodes[i,2], nodes[i,3]))    
        file.write("""# part 2 - facet list
#  %i facets, have mark
%i  1
    """ % (len(elem_new), len(elem_new)))      
        for i in range (0,len(elem_new)):
    #        if elem_new is cell:
            if ((nodes_set[int(elem_new[i,0])-1]==0) or (nodes_set[int(elem_new[i,1])-1]==0) or (nodes_set[int(elem_new[i,2])-1]==0)):        
                file.write('1\n3\t%i\t%i\t%i\n' % (elem_new[i,0], elem_new[i,1], elem_new[i,2]))
    #        if elem_new is gel:
            else:
                file.write('1\n3\t%i\t%i\t%i\n' % (elem_new[i,0], elem_new[i,1], elem_new[i,2]))        
        file.write("""
# part 3 - hole list
0

# part 4 - region list
1  # 2 regions
# No. x y z Attr. Max Vol.\n""")
        coords_nodo_interior = np.zeros(3)
        coords_nodo_interior[0] = coord_x2+coord_x1/10
        coords_nodo_interior[1] = coord_y2+coord_y1/10
        coords_nodo_interior[2] = coord_z2+coord_z1/10
        file.write('1\t%.1f\t%.1f\t%.1f\t1 #Gel \n' % (coords_nodo_interior[0],coords_nodo_interior[1],coords_nodo_interior[2]))


def write_poly2(filename):
    inpfile = read_inp(filename)
    data=get_inp_data(inpfile)
    nodes = data['NODE']
    elem = data ['ELEMENT, TYPE=S3']
    
    # It is crucial to identify which nodes are cell (0) and which ones are gel (1)
    # The gel set is located in the surface of the part
    coord_x1 = max(nodes[:,1])
    coord_x2 = min(nodes[:,1])

    coord_y1 = max(nodes[:,2])
    coord_y2 = min(nodes[:,2])
    
    coord_z1 = max(nodes[:,3])
    coord_z2 = min(nodes[:,3])
    nodes_set = np.zeros(len(nodes))
    for i in range (0, len(nodes_set)):
        if ( coord_x1 == np.absolute(nodes[i,1])) or (coord_y1 == np.absolute(nodes[i,2])) or (coord_z1 == np.absolute(nodes[i,3])) \
            or (coord_x2 == np.absolute(nodes[i,1])) or (coord_y2 == np.absolute(nodes[i,2])) or (coord_z2 == np.absolute(nodes[i,3])):
            nodes_set[i] = 1
        else: 
            nodes_set[i] = 0
            
    elem = np.delete(elem, 0, axis=1)
    
    #split mesh
    #Split is a, b, c and a, c ,d
    elem_new = np.zeros((2*len(elem), 3))
    for i in range (0, len(elem)):
        elem_new[2*i, :] = elem[i,0:3]
        elem_new[2*i+1,0]= elem[i,0]
        elem_new[2*i+1,1:3]= elem[i,2:4]
        
    # Finally, writing the poly file   
    fname = 'apply_displacements3.poly'
    with open(fname, 'w') as file:
        file.write("""# TetGen input file
#
# part 1 - node list
#  %i nodes, 3 dim., no attr. no mark
%i  3  0  0 
    """ % (len(nodes), len(nodes))) 
        for i in range (0,len(nodes)):
            file.write('%i\t%.7f\t%.7f\t%.7f\n' % (nodes[i,0], nodes[i,1], nodes[i,2], nodes[i,3]))    
        file.write("""# part 2 - facet list
#  %i facets, have mark
%i  1
    """ % (len(elem_new), len(elem_new)))      
        for i in range (0,len(elem_new)):
    #        if elem_new is cell:
            if ((nodes_set[int(elem_new[i,0])-1]==0) or (nodes_set[int(elem_new[i,1])-1]==0) or (nodes_set[int(elem_new[i,2])-1]==0)):        
                file.write('1\n3\t%i\t%i\t%i\n' % (elem_new[i,0], elem_new[i,1], elem_new[i,2]))
    #        if elem_new is gel:
            else:
                file.write('1\n3\t%i\t%i\t%i\n' % (elem_new[i,0], elem_new[i,1], elem_new[i,2]))        
        file.write("""
# part 3 - hole list
0

# part 4 - region list
1  # 2 regions
# No. x y z Attr. Max Vol.\n""")
        coords_nodo_interior = np.zeros(3)
        coords_nodo_interior[0] = coord_x2+coord_x1/10
        coords_nodo_interior[1] = coord_y2+coord_y1/10
        coords_nodo_interior[2] = coord_z2+coord_z1/10
        file.write('1\t%.1f\t%.1f\t%.1f\t1 #Gel \n' % (coords_nodo_interior[0],coords_nodo_interior[1],coords_nodo_interior[2]))


#filename = 'apply_displacements3.poly'
# Run tetgen 
#./tetgen.exe -VFqAa1e-1 apply_displacements3.poly
# copy paste .node and .ele files in current folder

def tetgen2inp():
    nodes = np.genfromtxt('apply_displacements3.1.node', skip_header=1)
    elem = np.genfromtxt('apply_displacements3.1.ele', skip_header=1)
    
    # Split the two parts: cell and gel
    # elem_gel = np.zeros((len(elem)-len(elem_cell),5))
    elem_cell = elem[elem[:,5]==2,0:5]
    elem_gel = elem[elem[:,5]==1,0:5]
    
    #Create the same sets as there were at the beggining
    n_surface_cell = np.intersect1d(elem_cell[:,1:5], elem_gel[:,1:5])
    # n_solo_cell = np.setdiff1d(elem_cell[:,1:5], elem_gel[:,1:5])
    n_solo_gel = np.setdiff1d(elem_gel[:,1:5], elem_cell[:,1:5])
    n_cell = np.array(elem_cell[:,1:5]).flatten()
    n_cell = np.unique(n_cell[n_cell[:].argsort()])
    n_gel = np.union1d(n_surface_cell, n_solo_gel)
    #Create the gel_surface searching which nodes are on the surface(node number) or interior (0)
    coord_x1 = max(nodes[:,1])
    coord_y1 = max(nodes[:,2])  
    coord_z1 = max(nodes[:,3])
    
    surf_x=nodes[np.abs(nodes[:,1])==coord_x1][:,0]
    surf_y=nodes[np.abs(nodes[:,2])==coord_y1][:,0]
    surf_z=nodes[np.abs(nodes[:,3])==coord_z1][:,0]
    surf = np.concatenate((surf_x,surf_y,surf_z))
    n_surface_gel = np.unique(surf)
    
    #Save gel nodes in order to niterpolate only in these nodes
    gel_nodes = np.setdiff1d(n_solo_gel, n_surface_gel)
    np.savetxt('nodos_gel.txt',gel_nodes, fmt='%i')
    #Write the new inp  
    f = open('apply_displacements4.inp', 'w')
    f.write("""*Heading
** Job name: cell_elements_displacement_TFM Model name: Final_HE_trip_v1
** Generated by: Abaqus/CAE 6.13-5
*Preprint, echo=NO, model=NO, history=NO, contact=NO
**
*Node
""")
    nodes[:, 0] = nodes[:, 0].astype(float)
    np.savetxt(f, nodes,fmt='%i, %1.5f, %1.5f, %1.5f')
    #np.savetxt(f, nodes,fmt='%1.5f',delimiter=', ')
    f.write('*Element, type=C3D4\n')
    np.savetxt(f, elem[:,0:5],fmt='%i',delimiter=',')
    f.write('*Nset, nset=NODOS_SURFACE_GEL\n')
    if (int(len(n_surface_gel)%16))==0 :
        n_surface_gel_1 = np.reshape(n_surface_gel,(-1,16))
        np.savetxt(f, n_surface_gel_1,fmt='%i',delimiter=',')
    else:
        n_surface_gel_1 = np.reshape(n_surface_gel[0:-int(len(n_surface_gel)%16)],(-1,16))
        n_surface_gel_2 = np.reshape(np.setdiff1d(n_surface_gel, n_surface_gel_1),(-1))
        np.savetxt(f, n_surface_gel_1,fmt='%i',delimiter=',')
        np.savetxt(f, n_surface_gel_2.reshape(-1, 1).T,fmt='%i',delimiter=',')
    
    f.write('*Nset, nset=NODOS_SURFACE_CYTO\n')
    if (int(len(n_surface_cell)%16))==0 :
        n_surface_cell_1 = np.reshape(n_surface_cell,(-1,16))
        np.savetxt(f, n_surface_cell_1,fmt='%i',delimiter=',')
    else:
        n_surface_cell_1 = np.reshape(n_surface_cell[0:-int(len(n_surface_cell)%16)],(-1,16))
        n_surface_cell_2 = np.reshape(np.setdiff1d(n_surface_cell, n_surface_cell_1),(-1))
        np.savetxt(f, n_surface_cell_1,fmt='%i',delimiter=',')
        np.savetxt(f, n_surface_cell_2.reshape(-1, 1).T,fmt='%i',delimiter=',')
           
    f.write('*Elset, elset=ELEMENT_GEL\n')
    if (int(len(elem_gel)%16))==0 :
        elem_gel_1 = np.reshape(elem_gel[:,0],(-1,16))
        np.savetxt(f, elem_gel_1,fmt='%i',delimiter=',')
    else:
        elem_gel_1 = np.reshape(elem_gel[0:-int(len(elem_gel)%16),0],(-1,16))
        elem_gel_2 = np.reshape(np.setdiff1d(elem_gel[:,0], elem_gel_1),(-1))
        np.savetxt(f, elem_gel_1,fmt='%i',delimiter=',')
        np.savetxt(f, elem_gel_2.reshape(-1, 1).T,fmt='%i',delimiter=',')
            
    f.write('*Elset, elset=ELEMENT_CYTO\n')
    if (int(len(elem_cell)%16))==0 :
        elem_cell_1 = np.reshape(elem_cell[:,0],(-1,16))
        np.savetxt(f, elem_cell_1,fmt='%i',delimiter=',')
    else:
        elem_cell_1 = np.reshape(elem_cell[0:-int(len(elem_cell)%16),0],(-1,16))
        elem_cell_2 = np.reshape(np.setdiff1d(elem_cell[:,0], elem_cell_1),(-1))
        np.savetxt(f, elem_cell_1,fmt='%i',delimiter=',')
        np.savetxt(f, elem_cell_2.reshape(-1, 1).T,fmt='%i',delimiter=',')
    
    f.write('*Nset, nset=NODOS_SOLO_GEL\n')
    if (int(len(n_solo_gel)%16))==0 :
        n_solo_gel_1 = np.reshape(n_solo_gel,(-1,16))
        np.savetxt(f, n_solo_gel_1,fmt='%i',delimiter=',')
    else:
        n_solo_gel_1 = np.reshape(n_solo_gel[0:-int(len(n_solo_gel)%16)],(-1,16))
        n_solo_gel_2 = np.reshape(np.setdiff1d(n_solo_gel, n_solo_gel_1),(-1))
        np.savetxt(f, n_solo_gel_1,fmt='%i',delimiter=',')
        np.savetxt(f, n_solo_gel_2.reshape(-1, 1).T,fmt='%i',delimiter=',')    
    
    f.write('*Nset, nset=NODOS_CELL\n')  
    if (int(len(n_cell)%16))==0 :
        n_cell1 = np.reshape(n_cell,(-1,16))
        np.savetxt(f, n_cell1,fmt='%i',delimiter=',')
    else:
        n_cell1 = np.reshape(n_cell[0:-int(len(n_cell)%16)],(-1,16))
        n_cell2 = np.reshape(np.setdiff1d(n_cell, n_cell1),(-1))
        np.savetxt(f, n_cell1,fmt='%i',delimiter=',')
        np.savetxt(f, n_cell2.reshape(-1, 1).T,fmt='%i',delimiter=',')   
            
    f.write('*Nset, nset=NODOS_GEL\n')
    if (int(len(n_gel)%16))==0 :
        n_gel_1 = np.reshape(n_gel,(-1,16))
        np.savetxt(f, n_gel_1,fmt='%i',delimiter=',')
    else:
        n_gel_1 = np.reshape(n_gel[0:-int(len(n_gel)%16)],(-1,16))
        n_gel_2 = np.reshape(np.setdiff1d(n_gel, n_gel_1),(-1))
        np.savetxt(f, n_gel_1,fmt='%i',delimiter=',')
        np.savetxt(f, n_gel_2.reshape(-1, 1).T,fmt='%i',delimiter=',')
     
   
    f.write("""**Section: Section-1-ELEMENT_GEL
*Solid Section, elset = ELEMENT_GEL, material = GEL_HE
**Section: Section-2-ELEMENT_CYTO 
*Solid Section, elset = ELEMENT_CYTO, material = GEL_HE
**
 **********************************************
** MATERIALS
**
*Material, name = GEL_HE
*Hyperelastic, neo hooke
20, 0.005
**********************************************
** BOUNDARY CONDITIONS
**
*Boundary
NODOS_SURFACE_GEL, 1, 1
NODOS_SURFACE_GEL, 2, 2
NODOS_SURFACE_GEL, 3, 3
NODOS_SURFACE_GEL, 4, 4
NODOS_SURFACE_GEL, 5, 5
NODOS_SURFACE_GEL, 6, 6
**
**********************************************
** STEP: Displacements_imposed
""")
    f.close()
def interpolate():
    malla1 = 'apply_displacements.inp'
    inpfile = read_inp(malla1)
    data=get_inp_data(inpfile)
    nodes1 = data['NODE']
    nodes1 = np.delete(nodes1, 0, axis=1)
       
    malla2 = 'apply_displacements4.inp'
    inpfile2 = read_inp(malla2)
    data2 = get_inp_data(inpfile2)
    nodes2 = data2['NODE']
    nodes2 = np.delete(nodes2, 0, axis=1)
      
    data = np.genfromtxt('displac_known.txt')
    data1 = np.zeros((len(nodes1),3))

    data1[data[:,0].astype(int)-1,:] = data[:,1:4]   
    data2 = griddata(nodes1,data1,nodes2,method = 'linear')
    data_interp = np.arange(1,len(nodes2)+1,1)
    data_interp1 = np.column_stack((data_interp,data2))
    
    
    n_gel = np.genfromtxt('nodos_gel.txt')
    data_interp_gel = data2[n_gel.astype(int)-1,0:4]
    data_interp_gel = np.column_stack((n_gel,data_interp_gel))
    np.savetxt('displac_known2.txt', data_interp_gel,fmt='%i\t%1.9f\t%1.9f\t%1.9f')

    
def interpolate2():
    malla1 = 'apply_displacements.inp'
    inpfile = read_inp(malla1)
    data=get_inp_data(inpfile)
    nodes1 = data['NODE']
    nodes1 = np.delete(nodes1, 0, axis=1)
       
    malla2 = 'apply_displacements4.inp'
    inpfile2 = read_inp(malla2)
    data2 = get_inp_data(inpfile2)
    nodes2 = data2['NODE']
    nodes2 = np.delete(nodes2, 0, axis=1)
      
    data = np.genfromtxt('new_displacements_input.txt')
    data1 = np.zeros((len(nodes1),3))
    time1 = time.time()
    data1[data[:,0].astype(int)-1,:] = data[:,1:4]
    
   
    data2 = griddata(nodes1,data1,nodes2,method = 'linear')
    data_interp = np.arange(1,len(nodes2)+1,1)
    data_interp1 = np.column_stack((data_interp,data2))
    
    
    n_gel = np.genfromtxt('nodos_gel.txt')
    data_interp_gel = data2[n_gel.astype(int)-1,0:4]
    data_interp_gel = np.column_stack((n_gel,data_interp_gel))
    f = open('displacements_input2.txt','w')
    for i in range(len(data_interp_gel)):
        if (np.any(np.isnan(data_interp_gel[i,:]))):
            f.write('%i\t0\t0\t0\n'% (data_interp_gel[i,0]))
        else:
            f.write('%i\t%.7f\t%.7f\t%.7f\n' % (data_interp_gel[i,0], data_interp_gel[i,1], data_interp_gel[i,2], data_interp_gel[i,3]))
    f.close()
if __name__ == "__main__":
    filename = 'apply_displacements.inp'
    function_name(filename)    


    n_gel = np.genfromtxt('nodos_gel.txt')
    data_interp_gel = data2[n_gel.astype(int)-1,0:4]
    data_interp_gel = np.column_stack((n_gel,data_interp_gel))
    f = open('displacements_input2.txt','w')
    for i in range(len(data_interp_gel)):
         if (np.any(np.isnan(data_interp_gel[i,:]))):
             f.write('%i\t0\t0\t0\n'% (data_interp_gel[i,0]))
         else:
             f.write('%i\t%.7f\t%.7f\t%.7f\n' % (data_interp_gel[i,0], data_interp_gel[i,1], data_interp_gel[i,2], data_interp_gel[i,3]))
    f.close()
